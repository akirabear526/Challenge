・Spring Framework
公式ページ
https://spring.io/

特徴
DI（Dependency Injection：依存性注入）
オブジェクトが他のオブジェクトを利用するコードを「依存性」のあるコードと呼び、DIはプログラム同士の依存性を排除できる。結果的にコードの簡素化、テストの簡易化、コード改修・移行の簡易化が見込める。

AOP（Aspect Oriented Programming：アスペクト指向プログラミング）
Javaでは、属性(データ)と操作(メソッド)の集合であるクラスを単位としているが、このクラスに分解できない要素も存在する。この分解できない要素を「アスペクト（Aspect）」としてモジュール化し、管理・変更・追加を容易にするのがAOPで、元のソースコードに変更を加えずに、新たな処理を追加することができる。

変更に強い　テストが簡単　拡張性が高い　保守性が高い　再利用性が高い

作成に向いているもの
Webシステム Webアプリケーション

・Java EE
公式ページ
http://www.oracle.com/technetwork/jp/java/javaee/overview/index.html

特徴
ServletやJSP、EJBやJavaの各種APIなど、企業システムの構築に必要な機能がまとめて提供されており、スタンダードで使い勝手の良いフレームワークである。


作成に向いているもの
企業システム　Webアプリケーション

・Play Framework
公式ページ
https://www.playframework.com

特徴
軽量さと高い生産性が特徴で動作時に使用するCPUリソースやメモリ使用量も少ないため、ハードウェアの負担をおさえたシステムの構築が可能である。

作成に向いているもの
Webアプリケーション